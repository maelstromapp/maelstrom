// Code generated by idl2go from JSON generated by Barrister v0.1.6
package v1

import (
	"fmt"
	"github.com/coopernurse/barrister-go"
	"reflect"
)

const BarristerVersion string = "0.1.6"
const BarristerChecksum string = "ff3c1e0cc7390860ea6df1005875c91d"
const BarristerDateGenerated int64 = 1644872997062000000

type EventSourceType string

const (
	EventSourceTypeHttp        EventSourceType = "http"
	EventSourceTypeCron                        = "cron"
	EventSourceTypeSqs                         = "sqs"
	EventSourceTypeAwsstepfunc                 = "awsstepfunc"
)

type StartParallelism string

const (
	StartParallelismParallel    StartParallelism = "parallel"
	StartParallelismSeries                       = "series"
	StartParallelismSeriesfirst                  = "seriesfirst"
)

type RestartOrder string

const (
	RestartOrderStartstop RestartOrder = "startstop"
	RestartOrderStopstart              = "stopstart"
)

type ComponentStatus string

const (
	ComponentStatusActive   ComponentStatus = "active"
	ComponentStatusStarting                 = "starting"
	ComponentStatusStopping                 = "stopping"
)

type Project struct {
	Name       string                      `json:"name"`
	Components []ComponentWithEventSources `json:"components"`
}

type ComponentWithEventSources struct {
	Component    Component               `json:"component"`
	EventSources []EventSourceWithStatus `json:"eventSources"`
}

type Component struct {
	Name                    string           `json:"name"`
	ProjectName             string           `json:"projectName,omitempty"`
	Environment             []NameValue      `json:"environment"`
	MinInstances            int64            `json:"minInstances,omitempty"`
	MaxInstances            int64            `json:"maxInstances,omitempty"`
	MaxInstancesPerNode     int64            `json:"maxInstancesPerNode,omitempty"`
	MaxConcurrency          int64            `json:"maxConcurrency"`
	SoftConcurrencyLimit    bool             `json:"softConcurrencyLimit,omitempty"`
	ScaleUpConcurrencyPct   float64          `json:"scaleUpConcurrencyPct,omitempty"`
	ScaleDownConcurrencyPct float64          `json:"scaleDownConcurrencyPct,omitempty"`
	MaxDurationSeconds      int64            `json:"maxDurationSeconds,omitempty"`
	StartParallelism        StartParallelism `json:"startParallelism,omitempty"`
	RestartOrder            RestartOrder     `json:"RestartOrder,omitempty"`
	Version                 int64            `json:"version"`
	ModifiedAt              int64            `json:"modifiedAt,omitempty"`
	Docker                  *DockerComponent `json:"docker,omitempty"`
}

type DockerComponent struct {
	Image                       string        `json:"image"`
	Command                     []string      `json:"command,omitempty"`
	Entrypoint                  []string      `json:"entrypoint,omitempty"`
	HttpPort                    int64         `json:"httpPort"`
	HttpHealthCheckPath         string        `json:"httpHealthCheckPath"`
	HttpStartHealthCheckSeconds int64         `json:"httpStartHealthCheckSeconds,omitempty"`
	HttpHealthCheckSeconds      int64         `json:"httpHealthCheckSeconds,omitempty"`
	HttpHealthCheckMaxFailures  int64         `json:"httpHealthCheckMaxFailures,omitempty"`
	HealthCheckFailedCommand    []string      `json:"healthCheckFailedCommand,omitempty"`
	IdleTimeoutSeconds          int64         `json:"idleTimeoutSeconds,omitempty"`
	Ports                       []string      `json:"ports,omitempty"`
	Volumes                     []VolumeMount `json:"volumes,omitempty"`
	NetworkName                 string        `json:"networkName,omitempty"`
	LogDriver                   string        `json:"logDriver,omitempty"`
	LogDriverOptions            []NameValue   `json:"logDriverOptions,omitempty"`
	CpuShares                   int64         `json:"cpuShares,omitempty"`
	ReserveMemoryMiB            int64         `json:"reserveMemoryMiB,omitempty"`
	LimitMemoryMiB              int64         `json:"limitMemoryMiB,omitempty"`
	PullCommand                 []string      `json:"pullCommand,omitempty"`
	PullUsername                string        `json:"pullUsername,omitempty"`
	PullPassword                string        `json:"pullPassword,omitempty"`
	PullImageOnPut              bool          `json:"pullImageOnPut,omitempty"`
	PullImageOnStart            bool          `json:"pullImageOnStart,omitempty"`
	Dns                         []string      `json:"dns,omitempty"`
	DnsOptions                  []string      `json:"dnsOptions,omitempty"`
	DnsSearch                   []string      `json:"dnsSearch,omitempty"`
	Ulimits                     []string      `json:"ulimits,omitempty"`
	Init                        bool          `json:"init,omitempty"`
	Hostname                    string        `json:"hostname,omitempty"`
	Domainname                  string        `json:"domainname,omitempty"`
	User                        string        `json:"user,omitempty"`
	Capadd                      []string      `json:"capadd,omitempty"`
	Capdrop                     []string      `json:"capdrop,omitempty"`
}

type VolumeMount struct {
	Type     string `json:"type,omitempty"`
	Source   string `json:"source"`
	Target   string `json:"target"`
	ReadOnly bool   `json:"readOnly,omitempty"`
}

type EventSourceWithStatus struct {
	EventSource EventSource `json:"eventSource"`
	Enabled     bool        `json:"enabled"`
}

type EventSource struct {
	Name          string                      `json:"name"`
	ComponentName string                      `json:"componentName"`
	ProjectName   string                      `json:"projectName,omitempty"`
	Version       int64                       `json:"version"`
	ModifiedAt    int64                       `json:"modifiedAt"`
	Http          *HttpEventSource            `json:"http,omitempty"`
	Cron          *CronEventSource            `json:"cron,omitempty"`
	Sqs           *SqsEventSource             `json:"sqs,omitempty"`
	Awsstepfunc   *AwsStepFunctionEventSource `json:"awsstepfunc,omitempty"`
}

type HttpEventSource struct {
	Hostname    string `json:"hostname,omitempty"`
	PathPrefix  string `json:"pathPrefix,omitempty"`
	StripPrefix bool   `json:"stripPrefix,omitempty"`
}

type CronEventSource struct {
	Schedule string          `json:"schedule"`
	Http     CronHttpRequest `json:"http"`
}

type CronHttpRequest struct {
	Method  string      `json:"method"`
	Path    string      `json:"path"`
	Data    string      `json:"data,omitempty"`
	Headers []NameValue `json:"headers,omitempty"`
}

type SqsEventSource struct {
	QueueName            string `json:"queueName"`
	NameAsPrefix         bool   `json:"nameAsPrefix,omitempty"`
	Path                 string `json:"path"`
	MaxConcurrency       int64  `json:"maxConcurrency,omitempty"`
	MessagesPerPoll      int64  `json:"messagesPerPoll,omitempty"`
	ConcurrencyPerPoller int64  `json:"concurrencyPerPoller,omitempty"`
	VisibilityTimeout    int64  `json:"visibilityTimeout,omitempty"`
}

type AwsStepFunctionEventSource struct {
	ActivityName         string `json:"activityName"`
	Path                 string `json:"path"`
	MaxConcurrency       int64  `json:"maxConcurrency,omitempty"`
	ConcurrencyPerPoller int64  `json:"concurrencyPerPoller,omitempty"`
}

type NodeStatus struct {
	NodeId            string          `json:"nodeId"`
	StartedAt         int64           `json:"startedAt"`
	ObservedAt        int64           `json:"observedAt"`
	Version           int64           `json:"version"`
	PeerUrl           string          `json:"peerUrl"`
	TotalMemoryMiB    int64           `json:"totalMemoryMiB"`
	FreeMemoryMiB     int64           `json:"freeMemoryMiB"`
	NumCPUs           int64           `json:"numCPUs"`
	LoadAvg1m         float64         `json:"loadAvg1m"`
	LoadAvg5m         float64         `json:"loadAvg5m"`
	LoadAvg15m        float64         `json:"loadAvg15m"`
	RunningComponents []ComponentInfo `json:"runningComponents"`
}

type ComponentInfo struct {
	ComponentName     string              `json:"componentName"`
	ComponentVersion  int64               `json:"componentVersion"`
	Status            ComponentStatus     `json:"status"`
	MaxConcurrency    int64               `json:"maxConcurrency"`
	MemoryReservedMiB int64               `json:"memoryReservedMiB"`
	StartTime         int64               `json:"startTime"`
	LastRequestTime   int64               `json:"lastRequestTime"`
	TotalRequests     int64               `json:"totalRequests"`
	Activity          []ComponentActivity `json:"activity"`
}

type ComponentActivity struct {
	Requests    int64   `json:"requests"`
	Concurrency float64 `json:"concurrency"`
}

type ProjectInfo struct {
	ProjectName      string `json:"projectName"`
	ComponentCount   int64  `json:"componentCount"`
	EventSourceCount int64  `json:"eventSourceCount"`
}

type ListProjectsInput struct {
	NamePrefix string `json:"namePrefix,omitempty"`
}

type ListProjectsOutput struct {
	Projects []ProjectInfo `json:"projects"`
}

type PutProjectInput struct {
	Project  Project `json:"project"`
	DiffOnly bool    `json:"diffOnly,omitempty"`
}

type PutProjectOutput struct {
	Name                string        `json:"name"`
	ComponentsAdded     []Component   `json:"componentsAdded"`
	ComponentsUpdated   []Component   `json:"componentsUpdated"`
	ComponentsRemoved   []string      `json:"componentsRemoved"`
	EventSourcesAdded   []EventSource `json:"eventSourcesAdded"`
	EventSourcesUpdated []EventSource `json:"eventSourcesUpdated"`
	EventSourcesRemoved []string      `json:"eventSourcesRemoved"`
}

type GetProjectInput struct {
	Name string `json:"name"`
}

type GetProjectOutput struct {
	Project Project `json:"project"`
}

type RemoveProjectInput struct {
	Name string `json:"name"`
}

type RemoveProjectOutput struct {
	Name  string `json:"name"`
	Found bool   `json:"found"`
}

type RemoveComponentInput struct {
	Name string `json:"name"`
}

type RemoveComponentOutput struct {
	Name  string `json:"name"`
	Found bool   `json:"found"`
}

type ListComponentsInput struct {
	NamePrefix  string `json:"namePrefix,omitempty"`
	ProjectName string `json:"projectName,omitempty"`
	Limit       int64  `json:"limit,omitempty"`
	NextToken   string `json:"nextToken,omitempty"`
}

type ListComponentsOutput struct {
	Components []Component `json:"components"`
	NextToken  string      `json:"nextToken,omitempty"`
}

type GetComponentInput struct {
	Name string `json:"name"`
}

type GetComponentOutput struct {
	Component Component `json:"component"`
}

type PutComponentInput struct {
	Component Component `json:"component"`
}

type PutComponentOutput struct {
	Name    string `json:"name"`
	Version int64  `json:"version"`
}

type NotifyDataChangedInput struct {
	NodeId  string             `json:"nodeId"`
	Changes []DataChangedUnion `json:"changes"`
}

type NotifyDataChangedOutput struct {
	RespondingNodeId string `json:"respondingNodeId"`
}

type DataChangedUnion struct {
	PutComponent    *Component             `json:"putComponent,omitempty"`
	RemoveComponent *RemoveComponentOutput `json:"removeComponent,omitempty"`
}

type PutEventSourceInput struct {
	EventSource EventSource `json:"eventSource"`
}

type PutEventSourceOutput struct {
	Name    string `json:"name"`
	Version int64  `json:"version"`
}

type GetEventSourceInput struct {
	Name string `json:"name"`
}

type GetEventSourceOutput struct {
	EventSource EventSource `json:"eventSource"`
}

type RemoveEventSourceInput struct {
	Name string `json:"name"`
}

type RemoveEventSourceOutput struct {
	Name  string `json:"name"`
	Found bool   `json:"found"`
}

type ToggleEventSourcesInput struct {
	Enabled         bool            `json:"enabled"`
	NamePrefix      string          `json:"namePrefix,omitempty"`
	ComponentName   string          `json:"componentName,omitempty"`
	ProjectName     string          `json:"projectName,omitempty"`
	EventSourceType EventSourceType `json:"eventSourceType,omitempty"`
}

type ToggleEventSourcesOutput struct {
	Enabled          bool     `json:"enabled"`
	EventSourceNames []string `json:"eventSourceNames"`
}

type ListEventSourcesInput struct {
	NamePrefix      string          `json:"namePrefix,omitempty"`
	ComponentName   string          `json:"componentName,omitempty"`
	ProjectName     string          `json:"projectName,omitempty"`
	EventSourceType EventSourceType `json:"eventSourceType,omitempty"`
	Limit           int64           `json:"limit,omitempty"`
	NextToken       string          `json:"nextToken,omitempty"`
}

type ListEventSourcesOutput struct {
	EventSources []EventSourceWithStatus `json:"eventSources"`
	NextToken    string                  `json:"nextToken,omitempty"`
}

type ListNodeStatusInput struct {
	ForceRefresh bool `json:"forceRefresh,omitempty"`
}

type ListNodeStatusOutput struct {
	RespondingNodeId string       `json:"respondingNodeId"`
	Nodes            []NodeStatus `json:"nodes"`
}

type GetNodeStatusInput struct {
	Status *NodeStatus `json:"status,omitempty"`
}

type GetNodeStatusOutput struct {
	Status NodeStatus `json:"status"`
}

type StatusChangedInput struct {
	NodeId  string      `json:"nodeId"`
	Exiting bool        `json:"exiting"`
	Status  *NodeStatus `json:"status,omitempty"`
}

type StatusChangedOutput struct {
	NodeId string `json:"nodeId"`
}

type PlaceComponentInput struct {
	ComponentName string `json:"componentName"`
}

type PlaceComponentOutput struct {
	ComponentName string     `json:"componentName"`
	Node          NodeStatus `json:"node"`
}

type StartStopComponentsInput struct {
	ClientNodeId  string            `json:"clientNodeId"`
	TargetVersion int64             `json:"targetVersion"`
	TargetCounts  []ComponentTarget `json:"targetCounts"`
	ReturnStatus  bool              `json:"returnStatus,omitempty"`
	Block         bool              `json:"block,omitempty"`
}

type StartStopComponentsOutput struct {
	TargetVersionMismatch bool                  `json:"targetVersionMismatch"`
	TargetStatus          *NodeStatus           `json:"targetStatus,omitempty"`
	Started               []ComponentDelta      `json:"started"`
	Stopped               []ComponentDelta      `json:"stopped"`
	Errors                []ComponentDeltaError `json:"errors"`
}

type TerminateNodeInput struct {
	AwsLifecycleHook *AwsLifecycleHook `json:"awsLifecycleHook,omitempty"`
}

type TerminateNodeOutput struct {
	AcceptedMessage bool   `json:"acceptedMessage"`
	NodeId          string `json:"nodeId,omitempty"`
	InstanceId      string `json:"instanceId,omitempty"`
}

type AwsLifecycleHook struct {
	QueueUrl             string `json:"QueueUrl"`
	MessageReceiptHandle string `json:"MessageReceiptHandle"`
	AutoScalingGroupName string `json:"AutoScalingGroupName"`
	InstanceId           string `json:"InstanceId"`
	LifecycleActionToken string `json:"LifecycleActionToken"`
	LifecycleHookName    string `json:"LifecycleHookName"`
}

type ComponentDelta struct {
	ComponentName     string `json:"componentName"`
	Delta             int64  `json:"delta"`
	RequiredMemoryMiB int64  `json:"requiredMemoryMiB"`
}

type ComponentTarget struct {
	ComponentName     string `json:"componentName"`
	RequiredMemoryMiB int64  `json:"requiredMemoryMiB"`
	TargetCount       int64  `json:"targetCount"`
}

type ComponentDeltaError struct {
	ComponentDelta ComponentDelta `json:"componentDelta"`
	Error          string         `json:"error"`
}

type NameValue struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type MaelstromService interface {
	ListProjects(input ListProjectsInput) (ListProjectsOutput, error)
	PutProject(input PutProjectInput) (PutProjectOutput, error)
	GetProject(input GetProjectInput) (GetProjectOutput, error)
	RemoveProject(input RemoveProjectInput) (RemoveProjectOutput, error)
	PutComponent(input PutComponentInput) (PutComponentOutput, error)
	GetComponent(input GetComponentInput) (GetComponentOutput, error)
	RemoveComponent(input RemoveComponentInput) (RemoveComponentOutput, error)
	ListComponents(input ListComponentsInput) (ListComponentsOutput, error)
	PutEventSource(input PutEventSourceInput) (PutEventSourceOutput, error)
	GetEventSource(input GetEventSourceInput) (GetEventSourceOutput, error)
	RemoveEventSource(input RemoveEventSourceInput) (RemoveEventSourceOutput, error)
	ToggleEventSources(input ToggleEventSourcesInput) (ToggleEventSourcesOutput, error)
	ListEventSources(input ListEventSourcesInput) (ListEventSourcesOutput, error)
	NotifyDataChanged(input NotifyDataChangedInput) (NotifyDataChangedOutput, error)
}

func NewMaelstromServiceProxy(c barrister.Client) MaelstromService {
	return MaelstromServiceProxy{c, barrister.MustParseIdlJson([]byte(IdlJsonRaw))}
}

type MaelstromServiceProxy struct {
	client barrister.Client
	idl    *barrister.Idl
}

func (_p MaelstromServiceProxy) ListProjects(input ListProjectsInput) (ListProjectsOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.ListProjects", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.ListProjects").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(ListProjectsOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(ListProjectsOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.ListProjects returned invalid type: %v", _t)
			return ListProjectsOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return ListProjectsOutput{}, _err
}

func (_p MaelstromServiceProxy) PutProject(input PutProjectInput) (PutProjectOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.PutProject", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.PutProject").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(PutProjectOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(PutProjectOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.PutProject returned invalid type: %v", _t)
			return PutProjectOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return PutProjectOutput{}, _err
}

func (_p MaelstromServiceProxy) GetProject(input GetProjectInput) (GetProjectOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.GetProject", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.GetProject").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(GetProjectOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(GetProjectOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.GetProject returned invalid type: %v", _t)
			return GetProjectOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return GetProjectOutput{}, _err
}

func (_p MaelstromServiceProxy) RemoveProject(input RemoveProjectInput) (RemoveProjectOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.RemoveProject", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.RemoveProject").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(RemoveProjectOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(RemoveProjectOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.RemoveProject returned invalid type: %v", _t)
			return RemoveProjectOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return RemoveProjectOutput{}, _err
}

func (_p MaelstromServiceProxy) PutComponent(input PutComponentInput) (PutComponentOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.PutComponent", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.PutComponent").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(PutComponentOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(PutComponentOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.PutComponent returned invalid type: %v", _t)
			return PutComponentOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return PutComponentOutput{}, _err
}

func (_p MaelstromServiceProxy) GetComponent(input GetComponentInput) (GetComponentOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.GetComponent", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.GetComponent").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(GetComponentOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(GetComponentOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.GetComponent returned invalid type: %v", _t)
			return GetComponentOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return GetComponentOutput{}, _err
}

func (_p MaelstromServiceProxy) RemoveComponent(input RemoveComponentInput) (RemoveComponentOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.RemoveComponent", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.RemoveComponent").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(RemoveComponentOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(RemoveComponentOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.RemoveComponent returned invalid type: %v", _t)
			return RemoveComponentOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return RemoveComponentOutput{}, _err
}

func (_p MaelstromServiceProxy) ListComponents(input ListComponentsInput) (ListComponentsOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.ListComponents", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.ListComponents").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(ListComponentsOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(ListComponentsOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.ListComponents returned invalid type: %v", _t)
			return ListComponentsOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return ListComponentsOutput{}, _err
}

func (_p MaelstromServiceProxy) PutEventSource(input PutEventSourceInput) (PutEventSourceOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.PutEventSource", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.PutEventSource").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(PutEventSourceOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(PutEventSourceOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.PutEventSource returned invalid type: %v", _t)
			return PutEventSourceOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return PutEventSourceOutput{}, _err
}

func (_p MaelstromServiceProxy) GetEventSource(input GetEventSourceInput) (GetEventSourceOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.GetEventSource", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.GetEventSource").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(GetEventSourceOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(GetEventSourceOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.GetEventSource returned invalid type: %v", _t)
			return GetEventSourceOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return GetEventSourceOutput{}, _err
}

func (_p MaelstromServiceProxy) RemoveEventSource(input RemoveEventSourceInput) (RemoveEventSourceOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.RemoveEventSource", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.RemoveEventSource").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(RemoveEventSourceOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(RemoveEventSourceOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.RemoveEventSource returned invalid type: %v", _t)
			return RemoveEventSourceOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return RemoveEventSourceOutput{}, _err
}

func (_p MaelstromServiceProxy) ToggleEventSources(input ToggleEventSourcesInput) (ToggleEventSourcesOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.ToggleEventSources", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.ToggleEventSources").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(ToggleEventSourcesOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(ToggleEventSourcesOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.ToggleEventSources returned invalid type: %v", _t)
			return ToggleEventSourcesOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return ToggleEventSourcesOutput{}, _err
}

func (_p MaelstromServiceProxy) ListEventSources(input ListEventSourcesInput) (ListEventSourcesOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.ListEventSources", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.ListEventSources").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(ListEventSourcesOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(ListEventSourcesOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.ListEventSources returned invalid type: %v", _t)
			return ListEventSourcesOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return ListEventSourcesOutput{}, _err
}

func (_p MaelstromServiceProxy) NotifyDataChanged(input NotifyDataChangedInput) (NotifyDataChangedOutput, error) {
	_res, _err := _p.client.Call("MaelstromService.NotifyDataChanged", input)
	if _err == nil {
		_retType := _p.idl.Method("MaelstromService.NotifyDataChanged").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(NotifyDataChangedOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(NotifyDataChangedOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("MaelstromService.NotifyDataChanged returned invalid type: %v", _t)
			return NotifyDataChangedOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return NotifyDataChangedOutput{}, _err
}

type NodeService interface {
	ListNodeStatus(input ListNodeStatusInput) (ListNodeStatusOutput, error)
	GetStatus(input GetNodeStatusInput) (GetNodeStatusOutput, error)
	StatusChanged(input StatusChangedInput) (StatusChangedOutput, error)
	PlaceComponent(input PlaceComponentInput) (PlaceComponentOutput, error)
	StartStopComponents(input StartStopComponentsInput) (StartStopComponentsOutput, error)
	TerminateNode(input TerminateNodeInput) (TerminateNodeOutput, error)
}

func NewNodeServiceProxy(c barrister.Client) NodeService {
	return NodeServiceProxy{c, barrister.MustParseIdlJson([]byte(IdlJsonRaw))}
}

type NodeServiceProxy struct {
	client barrister.Client
	idl    *barrister.Idl
}

func (_p NodeServiceProxy) ListNodeStatus(input ListNodeStatusInput) (ListNodeStatusOutput, error) {
	_res, _err := _p.client.Call("NodeService.ListNodeStatus", input)
	if _err == nil {
		_retType := _p.idl.Method("NodeService.ListNodeStatus").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(ListNodeStatusOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(ListNodeStatusOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("NodeService.ListNodeStatus returned invalid type: %v", _t)
			return ListNodeStatusOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return ListNodeStatusOutput{}, _err
}

func (_p NodeServiceProxy) GetStatus(input GetNodeStatusInput) (GetNodeStatusOutput, error) {
	_res, _err := _p.client.Call("NodeService.GetStatus", input)
	if _err == nil {
		_retType := _p.idl.Method("NodeService.GetStatus").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(GetNodeStatusOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(GetNodeStatusOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("NodeService.GetStatus returned invalid type: %v", _t)
			return GetNodeStatusOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return GetNodeStatusOutput{}, _err
}

func (_p NodeServiceProxy) StatusChanged(input StatusChangedInput) (StatusChangedOutput, error) {
	_res, _err := _p.client.Call("NodeService.StatusChanged", input)
	if _err == nil {
		_retType := _p.idl.Method("NodeService.StatusChanged").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(StatusChangedOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(StatusChangedOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("NodeService.StatusChanged returned invalid type: %v", _t)
			return StatusChangedOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return StatusChangedOutput{}, _err
}

func (_p NodeServiceProxy) PlaceComponent(input PlaceComponentInput) (PlaceComponentOutput, error) {
	_res, _err := _p.client.Call("NodeService.PlaceComponent", input)
	if _err == nil {
		_retType := _p.idl.Method("NodeService.PlaceComponent").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(PlaceComponentOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(PlaceComponentOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("NodeService.PlaceComponent returned invalid type: %v", _t)
			return PlaceComponentOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return PlaceComponentOutput{}, _err
}

func (_p NodeServiceProxy) StartStopComponents(input StartStopComponentsInput) (StartStopComponentsOutput, error) {
	_res, _err := _p.client.Call("NodeService.StartStopComponents", input)
	if _err == nil {
		_retType := _p.idl.Method("NodeService.StartStopComponents").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(StartStopComponentsOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(StartStopComponentsOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("NodeService.StartStopComponents returned invalid type: %v", _t)
			return StartStopComponentsOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return StartStopComponentsOutput{}, _err
}

func (_p NodeServiceProxy) TerminateNode(input TerminateNodeInput) (TerminateNodeOutput, error) {
	_res, _err := _p.client.Call("NodeService.TerminateNode", input)
	if _err == nil {
		_retType := _p.idl.Method("NodeService.TerminateNode").Returns
		_res, _err = barrister.Convert(_p.idl, &_retType, reflect.TypeOf(TerminateNodeOutput{}), _res, "")
	}
	if _err == nil {
		_cast, _ok := _res.(TerminateNodeOutput)
		if !_ok {
			_t := reflect.TypeOf(_res)
			_msg := fmt.Sprintf("NodeService.TerminateNode returned invalid type: %v", _t)
			return TerminateNodeOutput{}, &barrister.JsonRpcError{Code: -32000, Message: _msg}
		}
		return _cast, nil
	}
	return TerminateNodeOutput{}, _err
}

func NewJSONServer(idl *barrister.Idl, forceASCII bool, maelstromservice MaelstromService, nodeservice NodeService) barrister.Server {
	return NewServer(idl, &barrister.JsonSerializer{forceASCII}, maelstromservice, nodeservice)
}

func NewServer(idl *barrister.Idl, ser barrister.Serializer, maelstromservice MaelstromService, nodeservice NodeService) barrister.Server {
	_svr := barrister.NewServer(idl, ser)
	_svr.AddHandler("MaelstromService", maelstromservice)
	_svr.AddHandler("NodeService", nodeservice)
	return _svr
}

var IdlJsonRaw = `[
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "maelstrom.idl: Interface definition for\nhttps://maelstromapp.com/",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "comment",
        "name": "",
        "comment": "",
        "value": "Generic error codes:\n\n* 1001 - Invalid value (one or more fields has an invalid value)\n* 1002 - Already exists (uniqueness constraint violated)\n* 1003 - Not found (entity with provided ID was not found)\n* 1004 - Concurrent write violation (previous version of entity is not current)\n",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "interface",
        "name": "MaelstromService",
        "comment": "MaelstromService manages the core data structures (projects, components, event sources)\ndefined by the system users",
        "value": "",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": [
            {
                "name": "ListProjects",
                "comment": "ListProjects returns a paginated list of projects registered in the system.\n\nIf no projects exist in the system, ListProjectsOutput.projects\nwill be an empty list.\n\nResults are sorted by project name (ascending)\n",
                "params": [
                    {
                        "name": "input",
                        "type": "ListProjectsInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "ListProjectsOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "PutProject",
                "comment": "PutProject registers a set of components and event sources, grouped under a single name\nThis call diffs the input project with the prior state of the project, updating components\nin the project that already exist, adding components that do not, and removing components\nassociated with the project name that are no longer present in the input project.\n\nValidation is performed before any state changes are made. If invalid input is detected\nno changes to the system will occur.\n\nError Codes:\n\n* 1001 - input.name is invalid\n* 1001 - input.components is empty\n* 1001 - input.components contains an invalid component or event source\n",
                "params": [
                    {
                        "name": "input",
                        "type": "PutProjectInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "PutProjectOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetProject",
                "comment": "GetProject returns the project with the given name\n\nError Codes:\n\n* 1003 - No project found with that name\n",
                "params": [
                    {
                        "name": "input",
                        "type": "GetProjectInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "GetProjectOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "RemoveProject",
                "comment": "RemoveProject deletes the project with the given name\n\nThis operation removes the components and event sources contained\nin the project.\n\nIf no project is found with that name no error is raised\nand the call silently no-ops.\n",
                "params": [
                    {
                        "name": "input",
                        "type": "RemoveProjectInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "RemoveProjectOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "PutComponent",
                "comment": "PutComponent registers a component definition\n\nError Codes:\n\n* 1001 - input.name is invalid\n* 1004 - input.previousVersion does not match the version in the database\n",
                "params": [
                    {
                        "name": "input",
                        "type": "PutComponentInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "PutComponentOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetComponent",
                "comment": "GetComponent returns the component with the given name\n\nError Codes:\n\n* 1003 - No component found with that name\n",
                "params": [
                    {
                        "name": "input",
                        "type": "GetComponentInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "GetComponentOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "RemoveComponent",
                "comment": "RemoveComponent deletes the component with the given name\n\nIf no component is found with that name no error is raised\nand the call silently no-ops.\n\nError Codes:\n\n* 1001 - input.name is invalid\n",
                "params": [
                    {
                        "name": "input",
                        "type": "RemoveComponentInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "RemoveComponentOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "ListComponents",
                "comment": "ListComponents returns a paginated list of components registered in the system\noptionally filtered by name prefix.\n\nIf no components exist in the system, ListComponentsOutput.components\nwill be an empty list.\n\nResults are sorted by name (ascending)\n",
                "params": [
                    {
                        "name": "input",
                        "type": "ListComponentsInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "ListComponentsOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "PutEventSource",
                "comment": "PutEventSource registers an event source definition associated\nwith a component\n\nError Codes:\n\n* 1001 - input.name is invalid\n* 1001 - input.componentName is invalid\n* 1001 - No event source sub-type is provided\n* 1001 - input.http is provided but has no hostname or pathPrefix\n* 1003 - input.componentName does not reference a component defined in the system\n* 1004 - input.previousVersion does not match the version in the database\n",
                "params": [
                    {
                        "name": "input",
                        "type": "PutEventSourceInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "PutEventSourceOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetEventSource",
                "comment": "GetEventSource returns an event source with the given name\n\nError Codes:\n\n* 1003 - No event source found with that name\n",
                "params": [
                    {
                        "name": "input",
                        "type": "GetEventSourceInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "GetEventSourceOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "RemoveEventSource",
                "comment": "RemoveEventSource deletes an event source with the given name\n\nIf no event source is found with that name no error is raised\nand the call silently no-ops.\n\nError Codes:\n\n* 1001 - input.name is invalid\n",
                "params": [
                    {
                        "name": "input",
                        "type": "RemoveEventSourceInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "RemoveEventSourceOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "ToggleEventSources",
                "comment": "ToggleEventSources enables or disables one or more event sources\n\nIf no event source is found with that name no error is raised\nand the call silently no-ops.\n\nError Codes:\n\n* 1001 - input.name is invalid\n",
                "params": [
                    {
                        "name": "input",
                        "type": "ToggleEventSourcesInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "ToggleEventSourcesOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "ListEventSources",
                "comment": "ListEventSources returns a paginated list of event sources registered in the system\noptionally filtered by name prefix, component name, or type.\n\nIf no event sources exist in the system, ListEventSourcesOutput.eventSources\nwill be an empty list.\n\nResults are sorted by name (ascending)\n",
                "params": [
                    {
                        "name": "input",
                        "type": "ListEventSourcesInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "ListEventSourcesOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "NotifyDataChanged",
                "comment": "NotifyDataChanged allows cluster peers to communicate that components have\nbeen updated / removed in the system.\n\nThe receiver should update any internal state as appropriate.",
                "params": [
                    {
                        "name": "input",
                        "type": "NotifyDataChangedInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "NotifyDataChangedOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            }
        ],
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "interface",
        "name": "NodeService",
        "comment": "NodeService contains operations used between nodes in the cluster to coordinate, start,\nand stop containers.",
        "value": "",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": [
            {
                "name": "ListNodeStatus",
                "comment": "ListNodeStatus returns a paginated list of nodes registered in the system.\n\nIf no nodes exist in the system, ListNodeStatusOutput.nodes\nwill be an empty list.\n\nResults are sorted by the time the node's maelstrom process started (ascending)\n",
                "params": [
                    {
                        "name": "input",
                        "type": "ListNodeStatusInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "ListNodeStatusOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "GetStatus",
                "comment": "GetStatus returns the current status of the target node including any running containers,\nload average, and memory availability.  Nodes periodically write their status to the database\nbut this call is used to get the most recent information.",
                "params": [
                    {
                        "name": "input",
                        "type": "GetNodeStatusInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "GetNodeStatusOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "StatusChanged",
                "comment": "StatusChanged indicates that a node is leaving the cluster or has modified its list of\nrunning containers. The receiving node should update their in-memory cluster state as appropriate.",
                "params": [
                    {
                        "name": "input",
                        "type": "StatusChangedInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "StatusChangedOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "PlaceComponent",
                "comment": "PlaceComponent is called when a node wishes to invoke a component but is unaware of any\nrunning instances of that component.  The receiver should attempt to acquire the placement role\nand then determine which node in the cluster should start that component.\n\nThis operation fulfills the zero to one instance cold start case.\n\nError Codes:\n\n* 1003 - input.componentName does not reference a component defined in the system\n",
                "params": [
                    {
                        "name": "input",
                        "type": "PlaceComponentInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "PlaceComponentOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "StartStopComponents",
                "comment": "StartStopComponents is called by the placement node when scaling containers up or down for\na component.  The receiving node should start or stop components as directed on the request.",
                "params": [
                    {
                        "name": "input",
                        "type": "StartStopComponentsInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "StartStopComponentsOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            },
            {
                "name": "TerminateNode",
                "comment": "TerminateNode tells a node in the cluster to stop\nThis message is typically broadcast to all nodes and it is up to the receiving node\nto determine if the payload matches their instance id\n\nIf the request matches the receiver's instance id, it should initiate a graceful\nshutdown and notify its peers",
                "params": [
                    {
                        "name": "input",
                        "type": "TerminateNodeInput",
                        "optional": false,
                        "is_array": false,
                        "comment": ""
                    }
                ],
                "returns": {
                    "name": "",
                    "type": "TerminateNodeOutput",
                    "optional": false,
                    "is_array": false,
                    "comment": ""
                }
            }
        ],
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Project",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Name of project. (a-zA-Z0-9_-)+\nName max size is 20 characters"
            },
            {
                "name": "components",
                "type": "ComponentWithEventSources",
                "optional": false,
                "is_array": true,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ComponentWithEventSources",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "component",
                "type": "Component",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "eventSources",
                "type": "EventSourceWithStatus",
                "optional": false,
                "is_array": true,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "Component",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Name of the component (a-zA-Z0-9_-)+\nName max size is 60 characters\nThis value uniquely identifies the component in the system."
            },
            {
                "name": "projectName",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If the component is the member of a project, this is the project name"
            },
            {
                "name": "environment",
                "type": "NameValue",
                "optional": false,
                "is_array": true,
                "comment": "Environment variables - these override variables defined at the\nproject level (if applicable)"
            },
            {
                "name": "minInstances",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Minimum instances of this component to run (default=0)"
            },
            {
                "name": "maxInstances",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Maximum instances of this component to run across the entire cluster (default=0, no upper limit)"
            },
            {
                "name": "maxInstancesPerNode",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Maximum instances of this component to run on a single node (default=0, no upper limit)"
            },
            {
                "name": "maxConcurrency",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": "Maximum concurrent requests to proxy to a single instance of this component"
            },
            {
                "name": "softConcurrencyLimit",
                "type": "bool",
                "optional": true,
                "is_array": false,
                "comment": "If true, maxConcurrency will be used to autoscale the component, but will not\ncause requests exceeding the limit to queue (default=false)"
            },
            {
                "name": "scaleUpConcurrencyPct",
                "type": "float",
                "optional": true,
                "is_array": false,
                "comment": "If the % of maxConcurrency of all instances of this component exceeds this value,\nmore instances of the component will be started (respecting maxInstances if \u003e 0).\nValue should be 0..1 (e.g. .5 = 50%). (default=0.75)"
            },
            {
                "name": "scaleDownConcurrencyPct",
                "type": "float",
                "optional": true,
                "is_array": false,
                "comment": "If the % of maxConcurrency of all instances of this component is lower than this value,\ninstances of the component will be stopped (respecting minInstances if \u003e 0).\nValue should be 0..1 (e.g. .5 = 50%). (default=0.25)"
            },
            {
                "name": "maxDurationSeconds",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Maximum request duration (in seconds)\nDefault = 60"
            },
            {
                "name": "startParallelism",
                "type": "StartParallelism",
                "optional": true,
                "is_array": false,
                "comment": "Informs whether maelstrom should coordinate container starts, potentially\nperforming them in series (one at a time)\n\nDefault = parallel"
            },
            {
                "name": "RestartOrder",
                "type": "RestartOrder",
                "optional": true,
                "is_array": false,
                "comment": "Informs how updates to a new version should be performed.\n\nIf \"startstop\" a new container is started and health checked, then the old container is stopped.\nIf \"stopstart\" the old container is stopped, then the new container is started.\n\n\"startstop\" will result in faster upgrades to new versions and in single instance cases will\navoid request pauses during restarts.\n\nDefault = stopstart"
            },
            {
                "name": "version",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": "Current version of the component\nIf the current version in the db does not match, a 1004 error is raised.\nWhen creating a new component, set this to zero."
            },
            {
                "name": "modifiedAt",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Date component was last saved - may be omitted on put calls"
            },
            {
                "name": "docker",
                "type": "DockerComponent",
                "optional": true,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "DockerComponent",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "image",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "command",
                "type": "string",
                "optional": true,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "entrypoint",
                "type": "string",
                "optional": true,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "httpPort",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": "Port that process binds to in the container. This is the port\nmaelstrom will reverse proxy to when a request is received."
            },
            {
                "name": "httpHealthCheckPath",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Path to make GET request against to verify that the container is running"
            },
            {
                "name": "httpStartHealthCheckSeconds",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "max seconds between container start and initial health check pass\nif health check does not pass within this number of seconds, the container is stopped\nif this value \u003c 0 then no initial health check will be run at startup (default=60)"
            },
            {
                "name": "httpHealthCheckSeconds",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "interval to run health check (default=10)"
            },
            {
                "name": "httpHealthCheckMaxFailures",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "If this number of failures is reached the container will be considered\nnon-responsive and will be restarted. (default=1)"
            },
            {
                "name": "healthCheckFailedCommand",
                "type": "string",
                "optional": true,
                "is_array": true,
                "comment": "If set, this command will be run inside the container (via docker exec)\nbefore stopping and removing the container due to a health check failure.\nThis provides a hook that can be used to capture a thread dump or some other\nstate about the container that may be useful for debugging why it failed."
            },
            {
                "name": "idleTimeoutSeconds",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "If component is not invoked within this duration then\nthe docker container is stopped and removed.  (default=300)"
            },
            {
                "name": "ports",
                "type": "string",
                "optional": true,
                "is_array": true,
                "comment": "Optional list of ports to expose from the container\nThe httpPort specified above will be automatically mapped and should not be\nincluded in this list."
            },
            {
                "name": "volumes",
                "type": "VolumeMount",
                "optional": true,
                "is_array": true,
                "comment": "List of filesystem mounts to bind to container\nUse we care, as you must ensure these paths exist on any host in the maelstrom cluster"
            },
            {
                "name": "networkName",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "network name to bind container to - useful if using docker compose\nlocally with non-maelstrom resources (e.g. a database server) and you\nwish to address those resources by name on the docker overlay network"
            },
            {
                "name": "logDriver",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "Docker logging driver to use\nSee: https://docs.docker.com/config/containers/logging/configure/"
            },
            {
                "name": "logDriverOptions",
                "type": "NameValue",
                "optional": true,
                "is_array": true,
                "comment": "Options to pass to the logging driver.  Names are the same as the\nkeys specified in the docker documentation. For example \"syslog-address\"\nor \"fluentd-buffer-limit\""
            },
            {
                "name": "cpuShares",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "If set, this increases or reduces the container's CPU weight.\nEquivalent to the \"docker run --cpu-shares\" flag."
            },
            {
                "name": "reserveMemoryMiB",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "RAM in MiB that should be reserved on a node when starting this component\nOptional. Default=128"
            },
            {
                "name": "limitMemoryMiB",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Hard RAM limit for this component. This must be greater than or equal to reserveMemoryMiB\nOptional. If not set, no hard RAM limit will be imposed."
            },
            {
                "name": "pullCommand",
                "type": "string",
                "optional": true,
                "is_array": true,
                "comment": "If set, this command will be executed to pull the image\nIf any string element contains \"\u003cimage\u003e\" that token will be replaced with the image\nname of the component before running the command"
            },
            {
                "name": "pullUsername",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "Username and password to use for docker registry auth\nIf unset, no credentials will be used when pulling images"
            },
            {
                "name": "pullPassword",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "pullImageOnPut",
                "type": "bool",
                "optional": true,
                "is_array": false,
                "comment": "If true, image will be pulled after each PutComponent call even if no containers\nfor this component are running. (default=false)"
            },
            {
                "name": "pullImageOnStart",
                "type": "bool",
                "optional": true,
                "is_array": false,
                "comment": "If true, image will be pulled before starting a container. If false, image will\nbe pulled before starting a container only if no image is present locally. (default=false)"
            },
            {
                "name": "dns",
                "type": "string",
                "optional": true,
                "is_array": true,
                "comment": "DNS servers, options, and search to set on container\nSee: https://docs.docker.com/v17.09/engine/userguide/networking/default_network/configure-dns/"
            },
            {
                "name": "dnsOptions",
                "type": "string",
                "optional": true,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "dnsSearch",
                "type": "string",
                "optional": true,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "ulimits",
                "type": "string",
                "optional": true,
                "is_array": true,
                "comment": "format: name:soft limit:hard limit\nsee: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit"
            },
            {
                "name": "init",
                "type": "bool",
                "optional": true,
                "is_array": false,
                "comment": "If true, init flag will be set on container. (default=false)\nEquivalent to the \"docker run --init\" flag."
            },
            {
                "name": "hostname",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "Hostname set in the container\nNOTE: given that multiple instances of the same component may be run on the\nsame host, this should NOT be used for DNS purposes.\nThis field is supported for cases where your code uses hostname (e.g. for logging)\nEquivalent to the \"docker run --hostname\" flag"
            },
            {
                "name": "domainname",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "Domainname set in the container\nEquivalent to the \"docker run --domainname\" flag"
            },
            {
                "name": "user",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "User that will run the command(s) inside the container, also support user:group\nEquivalent to the \"docker run --user\" flag"
            },
            {
                "name": "capadd",
                "type": "string",
                "optional": true,
                "is_array": true,
                "comment": "Add linux capabilities\nEquivalent to the \"docker run --cap-add\" flag"
            },
            {
                "name": "capdrop",
                "type": "string",
                "optional": true,
                "is_array": true,
                "comment": "Drop linux capabilities\nEquivalent to the \"docker run --cap-drop\" flag    "
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "VolumeMount",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "type",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "See: https://godoc.org/github.com/docker/docker/api/types/mount#Type\ndefault=bind"
            },
            {
                "name": "source",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Path to mount point on host"
            },
            {
                "name": "target",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Path to mount inside container"
            },
            {
                "name": "readOnly",
                "type": "bool",
                "optional": true,
                "is_array": false,
                "comment": "default=false"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "EventSourceWithStatus",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "eventSource",
                "type": "EventSource",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "enabled",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "EventSource",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Name of the event source (a-zA-Z0-9_-)+\nName max size is 60 characters\nThis value uniquely identifies the event source in the system."
            },
            {
                "name": "componentName",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Name of the component the event source activates (a-zA-Z0-9_-)+\nName max size is 60 characters"
            },
            {
                "name": "projectName",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If the component the event source is associated with is the member of a project,\nthis is the project name"
            },
            {
                "name": "version",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "modifiedAt",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "http",
                "type": "HttpEventSource",
                "optional": true,
                "is_array": false,
                "comment": "One and only one event source type may be provided"
            },
            {
                "name": "cron",
                "type": "CronEventSource",
                "optional": true,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "sqs",
                "type": "SqsEventSource",
                "optional": true,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "awsstepfunc",
                "type": "AwsStepFunctionEventSource",
                "optional": true,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "HttpEventSource",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "hostname",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "at least one field (hostname, pathPrefix) must be provided\nif more than one is provided, only requests matching all fields will match"
            },
            {
                "name": "pathPrefix",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "stripPrefix",
                "type": "bool",
                "optional": true,
                "is_array": false,
                "comment": "If true, and pathPrefix is provided, the pathPrefix will be\nstripped from the request before proxying to the target"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "CronEventSource",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "schedule",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "UNIX-like cron expression specifying when rule should fire\nFor format rules see: https://godoc.org/github.com/robfig/cron"
            },
            {
                "name": "http",
                "type": "CronHttpRequest",
                "optional": false,
                "is_array": false,
                "comment": "Request to make"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "CronHttpRequest",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "method",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "HTTP method: GET, POST, PUT, DELETE"
            },
            {
                "name": "path",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Request path, optionally including a query string\nIf a query string is included, make sure the parameters are\nproperly URL encoded as it will be used verbatim"
            },
            {
                "name": "data",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "Request body (for POST, PUT)"
            },
            {
                "name": "headers",
                "type": "NameValue",
                "optional": true,
                "is_array": true,
                "comment": "HTTP headers"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "SqsEventSource",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "queueName",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Name of queue\nIf nameAsPrefix=true, this is the queueName prefix"
            },
            {
                "name": "nameAsPrefix",
                "type": "bool",
                "optional": true,
                "is_array": false,
                "comment": "Treat queueName as prefix and poll all queues with that prefix in order.\nIf more than one queue is found, the names will be sorted\nand drained in ascending order. This allows priority queueing\nto be done.  For example, create queues named:\n    myQueue-0, myQueue-1, myQueue-2\nIn this example myQueue-0 would have highest priority and\nwould be drained before processing messages from myQueue-1\n\nOptional. (default=false)"
            },
            {
                "name": "path",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Request path, optionally including a query string\nIf a query string is included, make sure the parameters are\nproperly URL encoded as it will be used verbatim"
            },
            {
                "name": "maxConcurrency",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Total max concurrent messages to process for this component (default=10)"
            },
            {
                "name": "messagesPerPoll",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Messages to receive per polling attempt (default=1)\nValid values: 1..10"
            },
            {
                "name": "concurrencyPerPoller",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Concurrent messages to process per polling process\nIf you want strict FIFO processing, set this value to 1 and make sure\nall SQS queues are created as FIFO queues and that producers are setting\nMessageGroupId appropriately. This defaults to the messagesPerPoll value."
            },
            {
                "name": "visibilityTimeout",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Max seconds to mark message invisible before it is eligible\nto dequeue again.  (default=300)\nMessages successfully processed before this time elapses will\nbe deleted from the queue automatically."
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "AwsStepFunctionEventSource",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "activityName",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Name of step function activity\nThe ARN for the activity will be resolved by maelstromd,\nand if not found an activity will be registered with AWS"
            },
            {
                "name": "path",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Request path, optionally including a query string\nIf a query string is included, make sure the parameters are\nproperly URL encoded as it will be used verbatim"
            },
            {
                "name": "maxConcurrency",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Total max concurrent messages to process for this component via this\nstep function activity (default=1)"
            },
            {
                "name": "concurrencyPerPoller",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Concurrent messages to process per polling process (default=1)"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "enum",
        "name": "EventSourceType",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": [
            {
                "value": "http",
                "comment": ""
            },
            {
                "value": "cron",
                "comment": ""
            },
            {
                "value": "sqs",
                "comment": ""
            },
            {
                "value": "awsstepfunc",
                "comment": ""
            }
        ],
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "enum",
        "name": "StartParallelism",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": [
            {
                "value": "parallel",
                "comment": "Start (or restart) components fully parallel (no coordination)"
            },
            {
                "value": "series",
                "comment": "Start component containers one at a time"
            },
            {
                "value": "seriesfirst",
                "comment": "The first container to update to a new version must\nacquire a lock, but after the new version has been deployed\nonce, all other instances may update in parallel.\n\nThis is useful for cases where the component performs some\nprovisioning step that may not tolerate concurrent execution\n(e.g. a db schema migration, or creation of a queue).\nIf seriesfirst is used, the first instance of a new version will\nrun in isolation (creating the relevant resources), and then all\nother containers can start (which will no-op on the resource creation\nor schema migration)"
            }
        ],
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "enum",
        "name": "RestartOrder",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": [
            {
                "value": "startstop",
                "comment": ""
            },
            {
                "value": "stopstart",
                "comment": ""
            }
        ],
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "NodeStatus",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "nodeId",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "startedAt",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "observedAt",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "version",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "peerUrl",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "totalMemoryMiB",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "freeMemoryMiB",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "numCPUs",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "loadAvg1m",
                "type": "float",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "loadAvg5m",
                "type": "float",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "loadAvg15m",
                "type": "float",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "runningComponents",
                "type": "ComponentInfo",
                "optional": false,
                "is_array": true,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "enum",
        "name": "ComponentStatus",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": [
            {
                "value": "active",
                "comment": ""
            },
            {
                "value": "starting",
                "comment": ""
            },
            {
                "value": "stopping",
                "comment": ""
            }
        ],
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ComponentInfo",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "componentName",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "componentVersion",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "status",
                "type": "ComponentStatus",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "maxConcurrency",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "memoryReservedMiB",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "startTime",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "lastRequestTime",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "totalRequests",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "activity",
                "type": "ComponentActivity",
                "optional": false,
                "is_array": true,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ComponentActivity",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "requests",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "concurrency",
                "type": "float",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ProjectInfo",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "projectName",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "componentCount",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "eventSourceCount",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ListProjectsInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "namePrefix",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If specified only projects matching this name prefix will be returned."
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ListProjectsOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "projects",
                "type": "ProjectInfo",
                "optional": false,
                "is_array": true,
                "comment": "Projects in current page of output or an empty list if\nno additional results exist"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "PutProjectInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "project",
                "type": "Project",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "diffOnly",
                "type": "bool",
                "optional": true,
                "is_array": false,
                "comment": "If true, changes will not be saved but PutProjectOutput of\nwhat would have been applied will be returned\ndefault = false"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "PutProjectOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "componentsAdded",
                "type": "Component",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "componentsUpdated",
                "type": "Component",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "componentsRemoved",
                "type": "string",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "eventSourcesAdded",
                "type": "EventSource",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "eventSourcesUpdated",
                "type": "EventSource",
                "optional": false,
                "is_array": true,
                "comment": ""
            },
            {
                "name": "eventSourcesRemoved",
                "type": "string",
                "optional": false,
                "is_array": true,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "GetProjectInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "GetProjectOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "project",
                "type": "Project",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "RemoveProjectInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "name of project to remove - will remove related components and event sources"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "RemoveProjectOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "found",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": "if project was found in the system this is true, otherwise false"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "RemoveComponentInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "name of component to remove"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "RemoveComponentOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "found",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": "if component was found in the system this is true, otherwise false"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ListComponentsInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "namePrefix",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If specified only components matching this name prefix will be returned."
            },
            {
                "name": "projectName",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If specified only components matching this project name will be returned"
            },
            {
                "name": "limit",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Max items to return per response (1..1000)\ndefault=1000"
            },
            {
                "name": "nextToken",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If set the next set of paginated results will be returned"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ListComponentsOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "components",
                "type": "Component",
                "optional": false,
                "is_array": true,
                "comment": "Components in current page of output or an empty list if\nno additional results exist"
            },
            {
                "name": "nextToken",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If set there are additional results.\nClient may make another ListComponents() request setting this\nas ListComponentsInput.nextToken"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "GetComponentInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "GetComponentOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "component",
                "type": "Component",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "PutComponentInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "component",
                "type": "Component",
                "optional": false,
                "is_array": false,
                "comment": "Component to save, keyed off component.name\ncomponent.version should be set to zero when creating a new component"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "PutComponentOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Name of the component stored"
            },
            {
                "name": "version",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": "New (current) version of the component\nFor a newly created component, this value will be 1.\nThe value will increment by one with each successful PutComponent() call."
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "NotifyDataChangedInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "nodeId",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Node ID that changes originated on"
            },
            {
                "name": "changes",
                "type": "DataChangedUnion",
                "optional": false,
                "is_array": true,
                "comment": "List of changes that peer should apply locally"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "NotifyDataChangedOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "respondingNodeId",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "DataChangedUnion",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "putComponent",
                "type": "Component",
                "optional": true,
                "is_array": false,
                "comment": "only one of the elements will be populated"
            },
            {
                "name": "removeComponent",
                "type": "RemoveComponentOutput",
                "optional": true,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "PutEventSourceInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "eventSource",
                "type": "EventSource",
                "optional": false,
                "is_array": false,
                "comment": "EventSource to save, keyed off eventSource.name"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "PutEventSourceOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Name of the event source stored"
            },
            {
                "name": "version",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": "New (current) version of the event source\nFor a newly created event source, this value will be 1.\nThe value will increment by one with each successful PutEventSource() call."
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "GetEventSourceInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "GetEventSourceOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "eventSource",
                "type": "EventSource",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "RemoveEventSourceInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "name of event source to remove"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "RemoveEventSourceOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "found",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": "if event source was found in the system this is true, otherwise false"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ToggleEventSourcesInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "enabled",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": "If true, matching event sources will be enabled. Otherwise they will be disabled."
            },
            {
                "name": "namePrefix",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If specified only event sources matching this name prefix will be updated."
            },
            {
                "name": "componentName",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If specified only event sources matching this component name will be updated"
            },
            {
                "name": "projectName",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If specified only event sources belonging to components with this project name will be updated"
            },
            {
                "name": "eventSourceType",
                "type": "EventSourceType",
                "optional": true,
                "is_array": false,
                "comment": "If specified only event sources matching this type will be updated"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ToggleEventSourcesOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "enabled",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": "Echoed from the input"
            },
            {
                "name": "eventSourceNames",
                "type": "string",
                "optional": false,
                "is_array": true,
                "comment": "Names of event sources updated"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ListEventSourcesInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "namePrefix",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If specified only event sources matching this name prefix will be returned."
            },
            {
                "name": "componentName",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If specified only event sources matching this component name will be returned"
            },
            {
                "name": "projectName",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If specified only event sources belonging to components with this project name will be returned"
            },
            {
                "name": "eventSourceType",
                "type": "EventSourceType",
                "optional": true,
                "is_array": false,
                "comment": "If specified only event sources matching this type will be returned"
            },
            {
                "name": "limit",
                "type": "int",
                "optional": true,
                "is_array": false,
                "comment": "Max items to return per response (1..1000)\ndefault=1000"
            },
            {
                "name": "nextToken",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If set the next set of paginated results will be returned"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ListEventSourcesOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "eventSources",
                "type": "EventSourceWithStatus",
                "optional": false,
                "is_array": true,
                "comment": "Event sources in current page of output or an empty list if\nno additional results exist"
            },
            {
                "name": "nextToken",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "If set there are additional results.\nClient may make another ListEventSources() request setting this\nas ListEventSourcesInput.nextToken"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ListNodeStatusInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "forceRefresh",
                "type": "bool",
                "optional": true,
                "is_array": false,
                "comment": "If true, contact all peers and request current NodeStatus\nOtherwise use cached status on the node. (default=false)"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ListNodeStatusOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "respondingNodeId",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Node ID of node responding to request"
            },
            {
                "name": "nodes",
                "type": "NodeStatus",
                "optional": false,
                "is_array": true,
                "comment": "Nodes in cluster"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "GetNodeStatusInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "status",
                "type": "NodeStatus",
                "optional": true,
                "is_array": false,
                "comment": "status of the calling node.\nclients that do not wish to share their state (or non-peer clients) may omit this."
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "GetNodeStatusOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "status",
                "type": "NodeStatus",
                "optional": false,
                "is_array": false,
                "comment": "status of the responding node"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "StatusChangedInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "nodeId",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "exiting",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "status",
                "type": "NodeStatus",
                "optional": true,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "StatusChangedOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "nodeId",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "PlaceComponentInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "componentName",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "PlaceComponentOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "componentName",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "node",
                "type": "NodeStatus",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "StartStopComponentsInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "clientNodeId",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Id of node making this request"
            },
            {
                "name": "targetVersion",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": "NodeStatus.version that the client thinks the target is currently on\nIf the target's version differs, that suggests a concurrent modification of the target,\nand this operation will be rejected by the target.\nThis allows multiple nodes to optimistically attempt to schedule concurrent scaling operations\nwithout central coordination."
            },
            {
                "name": "targetCounts",
                "type": "ComponentTarget",
                "optional": false,
                "is_array": true,
                "comment": "Number of instances of each component the client would like the target to run"
            },
            {
                "name": "returnStatus",
                "type": "bool",
                "optional": true,
                "is_array": false,
                "comment": "If true, targetStatus will be populated after performing changes\nOptional. default=false"
            },
            {
                "name": "block",
                "type": "bool",
                "optional": true,
                "is_array": false,
                "comment": "If true, block until target applies targetCounts\nOptional. default=false"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "StartStopComponentsOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "targetVersionMismatch",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": "If targetVersion did not match current version, this struct will be returned\nso that client can adjust its state and potentially try again\nIf this is true, started, stopped, and errors will all be empty."
            },
            {
                "name": "targetStatus",
                "type": "NodeStatus",
                "optional": true,
                "is_array": false,
                "comment": "This is populated if targetVersionMismatch=true, or if returnStatus=true"
            },
            {
                "name": "started",
                "type": "ComponentDelta",
                "optional": false,
                "is_array": true,
                "comment": "components started, or empty list if no containers started"
            },
            {
                "name": "stopped",
                "type": "ComponentDelta",
                "optional": false,
                "is_array": true,
                "comment": "components stopped, or empty list if no containers stopped"
            },
            {
                "name": "errors",
                "type": "ComponentDeltaError",
                "optional": false,
                "is_array": true,
                "comment": "ComponentCount messages that resulted in errors are included here, or empty list if no errors"
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "TerminateNodeInput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "awsLifecycleHook",
                "type": "AwsLifecycleHook",
                "optional": true,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "TerminateNodeOutput",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "acceptedMessage",
                "type": "bool",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "nodeId",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": "Node and Instance Id of receiving node"
            },
            {
                "name": "instanceId",
                "type": "string",
                "optional": true,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "AwsLifecycleHook",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "QueueUrl",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Used to delete the message on the receiver"
            },
            {
                "name": "MessageReceiptHandle",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "AutoScalingGroupName",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": "Used to confirm that hook has been processed"
            },
            {
                "name": "InstanceId",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "LifecycleActionToken",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "LifecycleHookName",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ComponentDelta",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "componentName",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "delta",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "requiredMemoryMiB",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ComponentTarget",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "componentName",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "requiredMemoryMiB",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "targetCount",
                "type": "int",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "ComponentDeltaError",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "componentDelta",
                "type": "ComponentDelta",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "error",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "struct",
        "name": "NameValue",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": [
            {
                "name": "name",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            },
            {
                "name": "value",
                "type": "string",
                "optional": false,
                "is_array": false,
                "comment": ""
            }
        ],
        "values": null,
        "functions": null,
        "barrister_version": "",
        "date_generated": 0,
        "checksum": ""
    },
    {
        "type": "meta",
        "name": "",
        "comment": "",
        "value": "",
        "extends": "",
        "fields": null,
        "values": null,
        "functions": null,
        "barrister_version": "0.1.6",
        "date_generated": 1644872997062,
        "checksum": "ff3c1e0cc7390860ea6df1005875c91d"
    }
]`
