
// maelstrom.idl: Interface definition for
// https://maelstromapp.com/

// Generic error codes:
//
// * 1001 - Invalid value (one or more fields has an invalid value)
// * 1002 - Already exists (uniqueness constraint violated)
// * 1003 - Not found (entity with provided ID was not found)
// * 1004 - Concurrent write violation (previous version of entity is not current)
//

// MaelstromService manages the core data structures (projects, components, event sources)
// defined by the system users
interface MaelstromService {

    // ListProjects returns a paginated list of projects registered in the system.
    //
    // If no projects exist in the system, ListProjectsOutput.projects
    // will be an empty list.
    //
    // Results are sorted by project name (ascending)
    //
    ListProjects(input ListProjectsInput) ListProjectsOutput

    // PutProject registers a set of components and event sources, grouped under a single name
    // This call diffs the input project with the prior state of the project, updating components
    // in the project that already exist, adding components that do not, and removing components
    // associated with the project name that are no longer present in the input project.
    //
    // Validation is performed before any state changes are made. If invalid input is detected
    // no changes to the system will occur.
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    // * 1001 - input.components is empty
    // * 1001 - input.components contains an invalid component or event source
    //
    PutProject(input PutProjectInput) PutProjectOutput

    // GetProject returns the project with the given name
    //
    // Error Codes:
    //
    // * 1003 - No project found with that name
    //
    GetProject(input GetProjectInput) GetProjectOutput

    // RemoveProject deletes the project with the given name
    //
    // This operation removes the components and event sources contained
    // in the project.
    //
    // If no project is found with that name no error is raised
    // and the call silently no-ops.
    //
    RemoveProject(input RemoveProjectInput) RemoveProjectOutput

    // PutComponent registers a component definition
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    // * 1004 - input.previousVersion does not match the version in the database
    //
    PutComponent(input PutComponentInput) PutComponentOutput

    // GetComponent returns the component with the given name
    //
    // Error Codes:
    //
    // * 1003 - No component found with that name
    //
    GetComponent(input GetComponentInput) GetComponentOutput

    // RemoveComponent deletes the component with the given name
    //
    // If no component is found with that name no error is raised
    // and the call silently no-ops.
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    //
    RemoveComponent(input RemoveComponentInput) RemoveComponentOutput

    // ListComponents returns a paginated list of components registered in the system
    // optionally filtered by name prefix.
    //
    // If no components exist in the system, ListComponentsOutput.components
    // will be an empty list.
    //
    // Results are sorted by name (ascending)
    //
    ListComponents(input ListComponentsInput) ListComponentsOutput

    // PutEventSource registers an event source definition associated
    // with a component
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    // * 1001 - input.componentName is invalid
    // * 1001 - No event source sub-type is provided
    // * 1001 - input.http is provided but has no hostname or pathPrefix
    // * 1003 - input.componentName does not reference a component defined in the system
    // * 1004 - input.previousVersion does not match the version in the database
    //
    PutEventSource(input PutEventSourceInput) PutEventSourceOutput

    // GetEventSource returns an event source with the given name
    //
    // Error Codes:
    //
    // * 1003 - No event source found with that name
    //
    GetEventSource(input GetEventSourceInput) GetEventSourceOutput

    // RemoveEventSource deletes an event source with the given name
    //
    // If no event source is found with that name no error is raised
    // and the call silently no-ops.
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    //
    RemoveEventSource(input RemoveEventSourceInput) RemoveEventSourceOutput

    // ToggleEventSources enables or disables one or more event sources
    //
    // If no event source is found with that name no error is raised
    // and the call silently no-ops.
    //
    // Error Codes:
    //
    // * 1001 - input.name is invalid
    //
    ToggleEventSources(input ToggleEventSourcesInput) ToggleEventSourcesOutput

    // ListEventSources returns a paginated list of event sources registered in the system
    // optionally filtered by name prefix, component name, or type.
    //
    // If no event sources exist in the system, ListEventSourcesOutput.eventSources
    // will be an empty list.
    //
    // Results are sorted by name (ascending)
    //
    ListEventSources(input ListEventSourcesInput) ListEventSourcesOutput

    // NotifyDataChanged allows cluster peers to communicate that components have
    // been updated / removed in the system.
    //
    // The receiver should update any internal state as appropriate.
    NotifyDataChanged(input NotifyDataChangedInput) NotifyDataChangedOutput
}

// NodeService contains operations used between nodes in the cluster to coordinate, start,
// and stop containers.
interface NodeService {

    // ListNodeStatus returns a paginated list of nodes registered in the system.
    //
    // If no nodes exist in the system, ListNodeStatusOutput.nodes
    // will be an empty list.
    //
    // Results are sorted by the time the node's maelstrom process started (ascending)
    //
    ListNodeStatus(input ListNodeStatusInput) ListNodeStatusOutput

    // GetStatus returns the current status of the target node including any running containers,
    // load average, and memory availability.  Nodes periodically write their status to the database
    // but this call is used to get the most recent information.
    GetStatus(input GetNodeStatusInput) GetNodeStatusOutput

    // StatusChanged indicates that a node is leaving the cluster or has modified its list of
    // running containers. The receiving node should update their in-memory cluster state as appropriate.
    StatusChanged(input StatusChangedInput) StatusChangedOutput

    // PlaceComponent is called when a node wishes to invoke a component but is unaware of any
    // running instances of that component.  The receiver should attempt to acquire the placement role
    // and then determine which node in the cluster should start that component.
    //
    // This operation fulfills the zero to one instance cold start case.
    //
    // Error Codes:
    //
    // * 1003 - input.componentName does not reference a component defined in the system
    //
    PlaceComponent(input PlaceComponentInput) PlaceComponentOutput

    // StartStopComponents is called by the placement node when scaling containers up or down for
    // a component.  The receiving node should start or stop components as directed on the request.
    StartStopComponents(input StartStopComponentsInput) StartStopComponentsOutput

    // TerminateNode tells a node in the cluster to stop
    // This message is typically broadcast to all nodes and it is up to the receiving node
    // to determine if the payload matches their instance id
    //
    // If the request matches the receiver's instance id, it should initiate a graceful
    // shutdown and notify its peers
    TerminateNode(input TerminateNodeInput) TerminateNodeOutput
}

struct Project {
    // Name of project. (a-zA-Z0-9_-)+
    // Name max size is 20 characters
    name         string
    components   []ComponentWithEventSources
}

struct ComponentWithEventSources {
    component     Component
    eventSources  []EventSourceWithStatus
}

struct Component {
    // Name of the component (a-zA-Z0-9_-)+
    // Name max size is 60 characters
    // This value uniquely identifies the component in the system.
    name         string

    // If the component is the member of a project, this is the project name
    projectName  string    [optional]

    // Environment variables - these override variables defined at the
    // project level (if applicable)
    environment  []NameValue

    // Minimum instances of this component to run (default=0)
    minInstances int      [optional]

    // Maximum instances of this component to run across the entire cluster (default=0, no upper limit)
    maxInstances int      [optional]

    // Maximum instances of this component to run on a single node (default=0, no upper limit)
    maxInstancesPerNode        int     [optional]

    // Maximum concurrent requests to proxy to a single instance of this component
    maxConcurrency      int

    // If true, maxConcurrency will be used to autoscale the component, but will not
    // cause requests exceeding the limit to queue (default=false)
    softConcurrencyLimit       bool    [optional]

    // If the % of maxConcurrency of all instances of this component exceeds this value,
    // more instances of the component will be started (respecting maxInstances if > 0).
    // Value should be 0..1 (e.g. .5 = 50%). (default=0.75)
    scaleUpConcurrencyPct      float   [optional]

    // If the % of maxConcurrency of all instances of this component is lower than this value,
    // instances of the component will be stopped (respecting minInstances if > 0).
    // Value should be 0..1 (e.g. .5 = 50%). (default=0.25)
    scaleDownConcurrencyPct    float   [optional]

    // Maximum request duration (in seconds)
    // Default = 60
    maxDurationSeconds  int   [optional]

    // Informs whether maelstrom should coordinate container starts, potentially
    // performing them in series (one at a time)
    //
    // Default = parallel
    startParallelism          StartParallelism  [optional]

    // Informs how updates to a new version should be performed.
    //
    // If "startstop" a new container is started and health checked, then the old container is stopped.
    // If "stopstart" the old container is stopped, then the new container is started.
    //
    // "startstop" will result in faster upgrades to new versions and in single instance cases will
    // avoid request pauses during restarts.
    //
    // Default = stopstart
    RestartOrder              RestartOrder      [optional]

    // Current version of the component
    // If the current version in the db does not match, a 1004 error is raised.
    // When creating a new component, set this to zero.
    version      int

    // Date component was last saved - may be omitted on put calls
    modifiedAt   int              [optional]

    docker       DockerComponent  [optional]
}

struct DockerComponent {
    image                   string
    command                 []string     [optional]
    entrypoint              []string     [optional]

    // Port that process binds to in the container. This is the port
    // maelstrom will reverse proxy to when a request is received.
    httpPort                int

    // Path to make GET request against to verify that the container is running
    httpHealthCheckPath     string

    // max seconds between container start and initial health check pass
    // if health check does not pass within this number of seconds, the container is stopped
    // if this value < 0 then no initial health check will be run at startup (default=60)
    httpStartHealthCheckSeconds  int     [optional]

    // interval to run health check (default=10)
    httpHealthCheckSeconds       int     [optional]

    // If this number of failures is reached the container will be considered
    // non-responsive and will be restarted. (default=1)
    httpHealthCheckMaxFailures   int     [optional]

    // If set, this command will be run inside the container (via docker exec)
    // before stopping and removing the container due to a health check failure.
    // This provides a hook that can be used to capture a thread dump or some other
    // state about the container that may be useful for debugging why it failed.
    healthCheckFailedCommand   []string  [optional]

    // If component is not invoked within this duration then
    // the docker container is stopped and removed.  (default=300)
    idleTimeoutSeconds           int     [optional]

    // Optional list of ports to expose from the container
    // The httpPort specified above will be automatically mapped and should not be
    // included in this list.
    ports                    []string       [optional]

    // List of filesystem mounts to bind to container
    // Use we care, as you must ensure these paths exist on any host in the maelstrom cluster
    volumes                  []VolumeMount  [optional]

    // network name to bind container to - useful if using docker compose
    // locally with non-maelstrom resources (e.g. a database server) and you
    // wish to address those resources by name on the docker overlay network
    networkName              string         [optional]

    // Docker logging driver to use
    // See: https://docs.docker.com/config/containers/logging/configure/
    logDriver                string         [optional]

    // Options to pass to the logging driver.  Names are the same as the
    // keys specified in the docker documentation. For example "syslog-address"
    // or "fluentd-buffer-limit"
    logDriverOptions         []NameValue    [optional]

    // If set, this increases or reduces the container's CPU weight.
    // Equivalent to the "docker run --cpu-shares" flag.
    cpuShares                int            [optional]

    // RAM in MiB that should be reserved on a node when starting this component
    // Optional. Default=128
    reserveMemoryMiB         int            [optional]

    // Hard RAM limit for this component. This must be greater than or equal to reserveMemoryMiB
    // Optional. If not set, no hard RAM limit will be imposed.
    limitMemoryMiB           int            [optional]

    // If set, this command will be executed to pull the image
    // If any string element contains "<image>" that token will be replaced with the image
    // name of the component before running the command
    pullCommand              []string       [optional]

    // Username and password to use for docker registry auth
    // If unset, no credentials will be used when pulling images
    pullUsername             string         [optional]
    pullPassword             string         [optional]

    // If true, image will be pulled after each PutComponent call even if no containers
    // for this component are running. (default=false)
    pullImageOnPut      bool  [optional]

    // If true, image will be pulled before starting a container. If false, image will
    // be pulled before starting a container only if no image is present locally. (default=false)
    pullImageOnStart    bool  [optional]

    // DNS servers, options, and search to set on container
    // See: https://docs.docker.com/v17.09/engine/userguide/networking/default_network/configure-dns/
    dns                         []string    [optional]
    dnsOptions                  []string    [optional]
    dnsSearch                   []string    [optional]

    // format: name:soft limit:hard limit
    // see: https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit
    ulimits                     []string    [optional]

    // If true, init flag will be set on container. (default=false)
    // Equivalent to the "docker run --init" flag.
    init                        bool        [optional]

    // Hostname set in the container
    // NOTE: given that multiple instances of the same component may be run on the
    // same host, this should NOT be used for DNS purposes.
    // This field is supported for cases where your code uses hostname (e.g. for logging)
    // Equivalent to the "docker run --hostname" flag
    hostname                    string      [optional]

    // Domainname set in the container
    // Equivalent to the "docker run --domainname" flag
    domainname                  string      [optional]

    // User that will run the command(s) inside the container, also support user:group
    // Equivalent to the "docker run --user" flag
    user                        string      [optional]

    // Add linux capabilities
    // Equivalent to the "docker run --cap-add" flag
    capadd                      []string    [optional]

    // Drop linux capabilities
    // Equivalent to the "docker run --cap-drop" flag
    capdrop                     []string    [optional]
}

struct VolumeMount {
    // See: https://godoc.org/github.com/docker/docker/api/types/mount#Type
    // default=bind
    type          string  [optional]

    // Path to mount point on host
    source        string

    // Path to mount inside container
    target        string

    // default=false
    readOnly      bool    [optional]
}

struct EventSourceWithStatus {
    eventSource    EventSource
    enabled        bool
}

struct EventSource {
    // Name of the event source (a-zA-Z0-9_-)+
    // Name max size is 60 characters
    // This value uniquely identifies the event source in the system.
    name string

    // Name of the component the event source activates (a-zA-Z0-9_-)+
    // Name max size is 60 characters
    componentName string

    // If the component the event source is associated with is the member of a project,
    // this is the project name
    projectName  string    [optional]

    version      int
    modifiedAt   int

    // One and only one event source type may be provided
    http         HttpEventSource              [optional]
    cron         CronEventSource              [optional]
    sqs          SqsEventSource               [optional]
    awsstepfunc  AwsStepFunctionEventSource   [optional]
}

struct HttpEventSource {
    // at least one field (hostname, pathPrefix) must be provided
    // if more than one is provided, only requests matching all fields will match
    hostname      string    [optional]
    pathPrefix    string    [optional]

    // If true, and pathPrefix is provided, the pathPrefix will be
    // stripped from the request before proxying to the target
    stripPrefix   bool      [optional]
}

struct CronEventSource {
    // UNIX-like cron expression specifying when rule should fire
    // For format rules see: https://godoc.org/github.com/robfig/cron
    schedule      string

    // Request to make
    http          CronHttpRequest
}

struct CronHttpRequest {
    // HTTP method: GET, POST, PUT, DELETE
    method        string

    // Request path, optionally including a query string
    // If a query string is included, make sure the parameters are
    // properly URL encoded as it will be used verbatim
    path          string

    // Request body (for POST, PUT)
    data          string       [optional]

    // HTTP headers
    headers       []NameValue  [optional]
}

struct SqsEventSource {

    // Name of queue
    // If nameAsPrefix=true, this is the queueName prefix
    queueName            string

    // Treat queueName as prefix and poll all queues with that prefix in order.
    // If more than one queue is found, the names will be sorted
    // and drained in ascending order. This allows priority queueing
    // to be done.  For example, create queues named:
    //     myQueue-0, myQueue-1, myQueue-2
    // In this example myQueue-0 would have highest priority and
    // would be drained before processing messages from myQueue-1
    //
    // Optional. (default=false)
    nameAsPrefix          bool    [optional]

    // Request path, optionally including a query string
    // If a query string is included, make sure the parameters are
    // properly URL encoded as it will be used verbatim
    path                  string

    // Total max concurrent messages to process for this component (default=10)
    maxConcurrency        int     [optional]

    // Messages to receive per polling attempt (default=1)
    // Valid values: 1..10
    messagesPerPoll       int     [optional]

    // Concurrent messages to process per polling process
    // If you want strict FIFO processing, set this value to 1 and make sure
    // all SQS queues are created as FIFO queues and that producers are setting
    // MessageGroupId appropriately. This defaults to the messagesPerPoll value.
    concurrencyPerPoller  int     [optional]

    // Max seconds to mark message invisible before it is eligible
    // to dequeue again.  (default=300)
    // Messages successfully processed before this time elapses will
    // be deleted from the queue automatically.
    visibilityTimeout     int     [optional]

}

struct AwsStepFunctionEventSource {
    // Name of step function activity
    // The ARN for the activity will be resolved by maelstromd,
    // and if not found an activity will be registered with AWS
    activityName            string

    // Request path, optionally including a query string
    // If a query string is included, make sure the parameters are
    // properly URL encoded as it will be used verbatim
    path                  string

    // Total max concurrent messages to process for this component via this
    // step function activity (default=1)
    maxConcurrency        int     [optional]

    // Concurrent messages to process per polling process (default=1)
    concurrencyPerPoller  int     [optional]
}

enum EventSourceType {
    http
    cron
    sqs
    awsstepfunc
}

enum StartParallelism {
    // Start (or restart) components fully parallel (no coordination)
    parallel
    //
    // Start component containers one at a time
    series
    //
    // The first container to update to a new version must
    // acquire a lock, but after the new version has been deployed
    // once, all other instances may update in parallel.
    //
    // This is useful for cases where the component performs some
    // provisioning step that may not tolerate concurrent execution
    // (e.g. a db schema migration, or creation of a queue).
    // If seriesfirst is used, the first instance of a new version will
    // run in isolation (creating the relevant resources), and then all
    // other containers can start (which will no-op on the resource creation
    // or schema migration)
    seriesfirst
}

enum RestartOrder {
    startstop
    stopstart
}

struct NodeStatus {
    nodeId             string
    startedAt          int
    observedAt         int
    version            int
    peerUrl            string
    totalMemoryMiB     int
    freeMemoryMiB      int
    numCPUs            int
    loadAvg1m          float
    loadAvg5m          float
    loadAvg15m         float
    runningComponents  []ComponentInfo
}

enum ComponentStatus {
    active
    starting
    stopping
}

struct ComponentInfo {
    componentName      string
    componentVersion   int
    status             ComponentStatus
    maxConcurrency     int
    memoryReservedMiB  int
    startTime          int
    lastRequestTime    int
    totalRequests      int
    activity           []ComponentActivity
}

struct ComponentActivity {
    requests      int
    concurrency   float
}

struct ProjectInfo {
    projectName       string
    componentCount    int
    eventSourceCount  int
}

struct ListProjectsInput {
    // If specified only projects matching this name prefix will be returned.
    namePrefix  string  [optional]
}

struct ListProjectsOutput {
    // Projects in current page of output or an empty list if
    // no additional results exist
    projects    []ProjectInfo
}

struct PutProjectInput {
    project   Project

    // If true, changes will not be saved but PutProjectOutput of
    // what would have been applied will be returned
    // default = false
    diffOnly  bool      [optional]
}

struct PutProjectOutput {
    name                 string
    componentsAdded      []Component
    componentsUpdated    []Component
    componentsRemoved    []string
    eventSourcesAdded    []EventSource
    eventSourcesUpdated  []EventSource
    eventSourcesRemoved  []string
}

struct GetProjectInput {
    name    string
}

struct GetProjectOutput {
    project     Project
}

struct RemoveProjectInput {
    // name of project to remove - will remove related components and event sources
    name    string
}

struct RemoveProjectOutput {
    name    string

    // if project was found in the system this is true, otherwise false
    found   bool
}

struct RemoveComponentInput {
    // name of component to remove
    name    string
}

struct RemoveComponentOutput {
    name    string

    // if component was found in the system this is true, otherwise false
    found   bool
}

struct ListComponentsInput {
    // If specified only components matching this name prefix will be returned.
    namePrefix  string  [optional]

    // If specified only components matching this project name will be returned
    projectName      string            [optional]

    // Max items to return per response (1..1000)
    // default=1000
    limit       int     [optional]

    // If set the next set of paginated results will be returned
    nextToken   string  [optional]
}

struct ListComponentsOutput {
    // Components in current page of output or an empty list if
    // no additional results exist
    components    []Component

    // If set there are additional results.
    // Client may make another ListComponents() request setting this
    // as ListComponentsInput.nextToken
    nextToken   string  [optional]
}

struct GetComponentInput {
    name       string
}

struct GetComponentOutput {
    component     Component
}

struct PutComponentInput {
    // Component to save, keyed off component.name
    // component.version should be set to zero when creating a new component
    component Component
}

struct PutComponentOutput {
    // Name of the component stored
    name string

    // New (current) version of the component
    // For a newly created component, this value will be 1.
    // The value will increment by one with each successful PutComponent() call.
    version int
}

struct NotifyDataChangedInput {
    // Node ID that changes originated on
    nodeId     string

    // List of changes that peer should apply locally
    changes    []DataChangedUnion
}

struct NotifyDataChangedOutput {
    respondingNodeId   string
}

struct DataChangedUnion {
    // only one of the elements will be populated
    putComponent      Component               [optional]
    removeComponent   RemoveComponentOutput   [optional]
}

struct PutEventSourceInput {
    // EventSource to save, keyed off eventSource.name
    eventSource     EventSource
}

struct PutEventSourceOutput {
    // Name of the event source stored
    name string

    // New (current) version of the event source
    // For a newly created event source, this value will be 1.
    // The value will increment by one with each successful PutEventSource() call.
    version int
}

struct GetEventSourceInput {
    name    string
}

struct GetEventSourceOutput {
    eventSource     EventSource
}

struct RemoveEventSourceInput {
    // name of event source to remove
    name    string
}

struct RemoveEventSourceOutput {
    name    string

    // if event source was found in the system this is true, otherwise false
    found   bool
}

struct ToggleEventSourcesInput {
    // If true, matching event sources will be enabled. Otherwise they will be disabled.
    enabled          bool

    // If specified only event sources matching this name prefix will be updated.
    namePrefix       string            [optional]

    // If specified only event sources matching this component name will be updated
    componentName    string            [optional]

    // If specified only event sources belonging to components with this project name will be updated
    projectName      string            [optional]

    // If specified only event sources matching this type will be updated
    eventSourceType  EventSourceType   [optional]
}

struct ToggleEventSourcesOutput {
    // Echoed from the input
    enabled          bool

    // Names of event sources updated
    eventSourceNames []string
}

struct ListEventSourcesInput {
    // If specified only event sources matching this name prefix will be returned.
    namePrefix       string            [optional]

    // If specified only event sources matching this component name will be returned
    componentName    string            [optional]

    // If specified only event sources belonging to components with this project name will be returned
    projectName      string            [optional]

    // If specified only event sources matching this type will be returned
    eventSourceType  EventSourceType   [optional]

    // Max items to return per response (1..1000)
    // default=1000
    limit            int     [optional]

    // If set the next set of paginated results will be returned
    nextToken        string  [optional]
}

struct ListEventSourcesOutput {
    // Event sources in current page of output or an empty list if
    // no additional results exist
    eventSources    []EventSourceWithStatus

    // If set there are additional results.
    // Client may make another ListEventSources() request setting this
    // as ListEventSourcesInput.nextToken
    nextToken   string  [optional]
}

struct ListNodeStatusInput {
    // If true, contact all peers and request current NodeStatus
    // Otherwise use cached status on the node. (default=false)
    forceRefresh       bool    [optional]
}

struct ListNodeStatusOutput {
    // Node ID of node responding to request
    respondingNodeId     string

    // Nodes in cluster
    nodes                []NodeStatus
}

struct GetNodeStatusInput {
    // status of the calling node.
    // clients that do not wish to share their state (or non-peer clients) may omit this.
    status           NodeStatus        [optional]
}

struct GetNodeStatusOutput {
    // status of the responding node
    status           NodeStatus
}

struct StatusChangedInput {
    nodeId      string
    exiting     bool
    status      NodeStatus   [optional]
}

struct StatusChangedOutput {
    nodeId      string
}

struct PlaceComponentInput {
    componentName     string
}

struct PlaceComponentOutput {
    componentName     string
    node              NodeStatus
}

struct StartStopComponentsInput {
    // Id of node making this request
    clientNodeId        string

    // NodeStatus.version that the client thinks the target is currently on
    // If the target's version differs, that suggests a concurrent modification of the target,
    // and this operation will be rejected by the target.
    // This allows multiple nodes to optimistically attempt to schedule concurrent scaling operations
    // without central coordination.
    targetVersion       int

    // Number of instances of each component the client would like the target to run
    targetCounts        []ComponentTarget

    // If true, targetStatus will be populated after performing changes
    // Optional. default=false
    returnStatus        bool     [optional]

    // If true, block until target applies targetCounts
    // Optional. default=false
    block               bool     [optional]
}

struct StartStopComponentsOutput {
    // If targetVersion did not match current version, this struct will be returned
    // so that client can adjust its state and potentially try again
    // If this is true, started, stopped, and errors will all be empty.
    targetVersionMismatch    bool

    // This is populated if targetVersionMismatch=true, or if returnStatus=true
    targetStatus             NodeStatus  [optional]

    // components started, or empty list if no containers started
    started          []ComponentDelta

    // components stopped, or empty list if no containers stopped
    stopped          []ComponentDelta

    // ComponentCount messages that resulted in errors are included here, or empty list if no errors
    errors           []ComponentDeltaError
}

struct TerminateNodeInput {
    awsLifecycleHook    AwsLifecycleHook   [optional]
}

struct TerminateNodeOutput {
    acceptedMessage     bool

    // Node and Instance Id of receiving node
    nodeId              string     [optional]
    instanceId          string     [optional]
}

struct AwsLifecycleHook {
    // Used to delete the message on the receiver
    QueueUrl               string
    MessageReceiptHandle   string

    // Used to confirm that hook has been processed
    AutoScalingGroupName   string
    InstanceId             string
    LifecycleActionToken   string
    LifecycleHookName      string
}

struct ComponentDelta {
    componentName     string
    delta             int
    requiredMemoryMiB int
}

struct ComponentTarget {
    componentName     string
    requiredMemoryMiB int
    targetCount       int
}

struct ComponentDeltaError {
    componentDelta    ComponentDelta
    error             string
}

struct NameValue {
    name   string
    value  string
}
